const { Telegraf, Markup } = require('telegraf')
const LocalSession = require('telegraf-session-local')
require('dotenv').config()

const token = process.env.TELEGRAM_TOKEN
const bot = new Telegraf(token)

const effectsForImages = [
	'—Ä–∞–∑–º—ã—Ç–∏–µ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏',
	'—è—Ä–∫–∏–µ –Ω–µ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞',
	'–Ω–µ–æ–Ω–æ–≤—ã–µ —Å–≤–µ—Ç—è—â–∏–µ—Å—è –∫–æ–Ω—Ç—É—Ä—ã',
	'–∏–Ω–≤–µ—Ä—Å–∏—è —Ü–≤–µ—Ç–∞',
	'—à—É–º',
	'—Å–µ–ø–∏—è',
	'–ø–æ—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è',
	'–∫–æ–Ω—Ç—Ä–∞—Å—Ç',
	'—Ä–∞–∑–º—ã—Ç–∏–µ –ø–æ –ì–∞—É—Å—Å—É',
	'—Ä–µ–∑–∫–æ—Å—Ç—å',
	'—Å—Ç–µ–∫–ª—è–Ω–Ω–æ–µ —Ä–∞–∑–º—ã—Ç–∏—è',
	'—Å–æ–ª—è—Ä–∏–∑–∞—Ü–∏—è',
	'–º–µ–¥–∏–∞–Ω–Ω–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ',
	'–Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å',
	'—ç—Ñ—Ñ–µ–∫—Ç —Ç–∏—Å–Ω–µ–Ω–∏—è',
	'—á—ë—Ä–Ω–æ-–±–µ–ª—ã–π',
	'—Å–º–µ—â–µ–Ω–∏–µ',
	'–ø–æ–º–µ–Ω—è—Ç—å –æ—Ç—Ç–µ–Ω–æ–∫',
	'–º—è–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ',
	'–±–ª—É—Ä',
	'–≥–ª–∏—Ç—á-—ç—Ñ—Ñ–µ–∫—Ç',
	'–≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞',
	'–º—è–≥–∫–∏–π —Å–≤–µ—Ç',
	'—ç—Ñ—Ñ–µ–∫—Ç –∑–µ—Ä–Ω–∞',
	'—Ä–∞—Å—Ç—É—à–µ–≤–∫–∞',
	'—Ç–µ–Ω–∏',
	'–∫—Ä—É–≥–æ–≤–∞—è –æ–±—Ä–µ–∑–∫–∞',
	'–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–∫–∞–∂–µ–Ω–∏–µ',
	'—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤',
	'—ç—Ñ—Ñ–µ–∫—Ç —Å—Ç–∞—Ä–∏–Ω–Ω–æ–≥–æ –∫–∏–Ω–æ',
	'—Ç–µ–∫—Å—Ç—É—Ä–Ω–æ–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ',
	'–º–æ–∑–∞–∏—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç',
	'—Å–∫–µ–≤–æ–º–æ—Ä—Ñ–∏–∑–º',
]
const effectsFor3D = [
	'–≥–ª—É–±–∏–Ω–∞ –∏ —Ç–µ–∫—Å—Ç—É—Ä–∞',
	'–ø–∞—Ä–∞–ª–ª–∞–∫—Å-—ç—Ñ—Ñ–µ–∫—Ç',
	'–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ç–µ–Ω–∏',
	'–∏—Å–∫–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã',
	'–∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç',
	'—Å–∏–º—É–ª—è—Ü–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏',
	'–æ–±—ä—ë–º–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã',
	'–∞–Ω–∏–º–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü',
	'–ª—É–º–∏–Ω–µ—Å—Ü–µ–Ω—Ç–Ω—ã–µ —É–∑–æ—Ä—ã',
	'—Ö—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–±–µ—Ä—Ä–∞—Ü–∏—è',
	'—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤',
	'–∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏',
	'–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —É–∑–æ—Ä—ã',
	'—Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
	'—Ä–∞–∑–º—ã—Ç–∏—è –¥–≤–∏–∂–µ–Ω–∏—è',
	'–º–æ—Ä—Ñ–∏–Ω–≥ —Ç–µ–∫—Å—Ç—É—Ä',
	'—Å–≤–µ—Ç–æ–≤—ã–µ –ª—É—á–∏',
	'–æ–±—ä—ë–º–Ω—ã–π —Å–≤–µ—Ç',
	'—Ä–µ—Ñ—Ä–∞–∫—Ü–∏—è',
	'—ç–ª–µ–º–µ–Ω—Ç—ã –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏',
	'—Å–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
	'–∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã',
	'–ø—É—Å—Ç–æ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã',
	'—Ü–≤–µ—Ç–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è',
	'—Å–≤–µ—Ç–æ–≤—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã',
	'–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏—è',
	'–Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è –∞–Ω–∏–º–∞—Ü–∏—è',
	'—Ç–µ–∫—Å—Ç—É—Ä–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è',
	'—Ç–µ–∫—É—á–∏–µ —Ñ–æ—Ä–º—ã',
	'—Å–ø–∏—Ä–∞–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è',
	'—Å–≤–µ—Ç—è—â–∏–µ—Å—è –∫–æ–Ω—Ç—É—Ä—ã',
	'–≥–ª—É–±–∏–Ω–Ω–∞—è —Ä–∞–∑–º—ã—Ç–∏–µ',
	'–≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã',
]
const effectsForMotion = [
	'—Ä–∞–∑–º—ã—Ç–∏–µ –ì–∞—É—Å—Å–∞',
	'—Å—Ç–∞—Ä–µ–Ω–∏–µ',
	'—Å–≤–µ—á–µ–Ω–∏–µ',
	'–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ',
	'–∏—Å–∫–∞–∂–µ–Ω–∏–µ',
	'–≥—Ä–∞–¥–∏–µ–Ω—Ç—ã ',
	'—Ñ–æ–Ω–æ–≤—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏',
	'–ø—É–ª—å—Å–∞—Ü–∏—è',
	'–¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è —Ñ–æ—Ä–º',
	'–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ',
	'—à—É–º',
	'—Ç–µ–∫—Å—Ç—É—Ä–Ω—ã–µ —Å–ª–æ–∏',
	'—Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ',
	'—Å–∂–∞—Ç–∏–µ',
	'–∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ',
	'–ø–∞—Ä–∞–ª–ª–∞–∫—Å',
	'–ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤',
	'—Å—Ç–∞—Ç–∏–∫–∞',
	'–¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã',
	'–ø—Ä–µ—Ä—ã–≤–∏—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è',
	'—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è',
	'—Ä–∞–∑–º—ã—Ç–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è',
	'—Ç—Ä—ë—Ö–º–µ—Ä–Ω–æ–µ –∏—Å–∫–∞–∂–µ–Ω–∏–µ',
	'—ç—Ñ—Ñ–µ–∫—Ç –≥–ª—É–±–∏–Ω—ã',
	'–≤—Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ –≤—Å–ø—ã—à–∫–∏',
	'—Ç–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
	'–≥–ª–∏—Ç—á',
	'—Ä–µ—Ç—Ä–æ',
	'–≥–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç',
]
const effectsForEditing = [
	'–∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ',
	'–∑—É–º',
	'–≤–∏–∑—É–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏',
	'–ø–∞—Ä–∞–ª–ª—Å–∞–∫—Å',
	'—à—É–º',
	'–ø–∞—Ç—Ç–µ—Ä–Ω—ã',
	'–º–∞—Å–∫–∏ –∏ –æ–±—Ä–µ–∑–∫–∏',
	'—Ä–µ—Ç—Ä–æ',
	'—Ç—Ä–µ–º–æ—Ä',
	'–≥–ª–∏—Ç—á',
	'—Ñ–∏–ª—å–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
	'–ª–∏–Ω–µ–π–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã',
	'—Å–ø–ª–æ—à–Ω—ã–µ –∑–∞–ª–∏–≤–∫–∏',
	'–≤—Å–ø—ã—à–∫–∞',
	'–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞',
	'—Å–∏–º—É–ª—è—Ü–∏—è –∫–∞–º–µ—Ä—ã',
	'—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–¥—Ä—ã',
	'–¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞',
	'–∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –∫—Ä–∞—ë–≤ ',
	'–∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ',
	'—Ç–∞–π–º–ª–∞–ø—Å',
	'–º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤',
	'—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞',
	'–ø—É–ª—å—Å–∞—Ü–∏—è',
	'—Å–ø–∏–¥-—Ä–∞–º–ø—ã',
	'–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤',
	'—ç—Ñ—Ñ–µ–∫—Ç –≥–ª—É–±–∏–Ω—ã',
	'—ç—Ñ—Ñ–µ–∫—Ç —Å—Ç—Ä–æ–±–æ—Å–∫–æ–ø–∞',
	'—Ä–µ–∑–∫–æ—Å—Ç—å',
	'–∫–∞–º–µ—Ä–∞ —Å –Ω–∞–∫–ª–æ–Ω–æ–º',
	'–∏–ª–ª—é–∑–∏—è –¥–≤–∏–∂–µ–Ω–∏—è',
]

bot.use(new LocalSession({ database: 'session_db.json' }).middleware())

function initializeStatistics(ctx) {
	if (!ctx.session.stats) {
		ctx.session.stats = {
			startCommandCount: 0,
			buttonClickCounts: {
				images: 0,
				threeD: 0,
				motion: 0,
				editing: 0,
			},
			inspireClickCount: 0,
			imageReceivedCount: 0,
		}
	}
}

bot.start(ctx => {
	initializeStatistics(ctx)
	ctx.session.stats.startCommandCount += 1

	ctx.reply(
		'–ü—Ä–∏–≤–µ—Ç! üåü –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏!',
		Markup.keyboard([
			['–ò–¥–µ–∏ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫', '–ò–¥–µ–∏ –¥–ª—è 3D'],
			['–ò–¥–µ–∏ –¥–ª—è –º–æ—É—à–µ–Ω–∞', '–ò–¥–µ–∏ –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞'],
		]).resize()
	)
})

bot.hears('–ò–¥–µ–∏ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫', ctx => {
	initializeStatistics(ctx)
	ctx.session.stats.buttonClickCounts.images += 1
	ctx.session.category = effectsForImages
	sendNewEffectMessage(ctx, effectsForImages)
})

bot.hears('–ò–¥–µ–∏ –¥–ª—è 3D', ctx => {
	initializeStatistics(ctx)
	ctx.session.stats.buttonClickCounts.threeD += 1
	ctx.session.category = effectsFor3D
	sendNewEffectMessage(ctx, effectsFor3D)
})

bot.hears('–ò–¥–µ–∏ –¥–ª—è –º–æ—É—à–µ–Ω–∞', ctx => {
	initializeStatistics(ctx)
	ctx.session.stats.buttonClickCounts.motion += 1
	ctx.session.category = effectsForMotion
	sendNewEffectMessage(ctx, effectsForMotion)
})

bot.hears('–ò–¥–µ–∏ –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞', ctx => {
	initializeStatistics(ctx)
	ctx.session.stats.buttonClickCounts.editing += 1
	ctx.session.category = effectsForEditing
	sendNewEffectMessage(ctx, effectsForEditing)
})

bot.action('inspire', ctx => {
	initializeStatistics(ctx)
	ctx.session.stats.inspireClickCount += 1
	const currentCategory = ctx.session.category || effectsForImages
	sendNewEffectMessage(ctx, currentCategory)
	ctx.answerCbQuery()
})

bot.on('photo', ctx => {
	initializeStatistics(ctx)
	ctx.session.stats.imageReceivedCount += 1
	ctx.reply('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! üòä')
})

function sendNewEffectMessage(ctx, effectList) {
	const selectedEffects = selectRandomEffects(effectList, 3)
	const message = `–ü–æ–ø—Ä–æ–±—É–π –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å: ${selectedEffects.join(
		', '
	)}. –ß—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑? –ü—Ä–∏—à–ª–µ—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?`

	ctx.reply(message, {
		reply_markup: {
			inline_keyboard: [[{ text: '–µ—â—ë', callback_data: 'inspire' }]],
		},
	})
}

function selectRandomEffects(effectsArray, count) {
	if (effectsArray.length < count) {
		return effectsArray.slice()
	}
	const shuffled = effectsArray.sort(() => 0.5 - Math.random())
	return shuffled.slice(0, count)
}

process.on('exit', () => {
	console.log('Bot statistics on exit:', bot.context.session.stats)
})

bot
	.launch()
	.then(() => console.log('Bot is running...'))
	.catch(error => {
		console.error('Error launching bot:', error)
		console.log('Check your bot token and configuration.')
	})
